import tensorflow as tffrom tensorflow import constantfrom tensorflow.contrib import rnnimport numpy as npdef grabVecs(filename):    import pickle    fr = open(filename)    return pickle.load(fr)x_train = grabVecs('./data for input/dataset.pkl')y_train = grabVecs('./data for input/label.pkl')# Parameterslearning_rate = 0.008batch_size = 100display_step = 1# Network Parametersn_input = 300  # MNIST data input (img shape: 28*28)n_steps = 49  # timestepsn_hidden = 300  # hidden layer num of featuresn_classes = 2  # MNIST total classes (0-9 digits)total = 2162x = tf.placeholder("float", [None, n_steps, n_input])# Tensorflow LSTM cell requires 2x n_hidden length (state & cell)istate_fw = tf.placeholder("float", [None, 2 * n_hidden])istate_bw = tf.placeholder("float", [None, 2 * n_hidden])y = tf.placeholder("float", [None, n_classes])weights = {    # Hidden layer weights => 2*n_hidden because of foward + backward cells    'hidden': tf.Variable(tf.random_normal([n_input, 2 * n_hidden]), name='hidden_w'),    'fc1': tf.Variable(tf.random_normal([n_steps * 2 * n_hidden, n_hidden]), name='fc1_w'),    'out': tf.Variable(tf.random_normal([n_hidden, n_classes]), name='out_w'),}biases = {    'hidden': tf.Variable(tf.random_normal([2 * n_hidden]), name='hidden_b'),    'fc1': tf.Variable(tf.random_normal([n_hidden]), name='fc1_b'),    'out': tf.Variable(tf.random_normal([n_classes]), name='out_b')}def BiRNN(_X, _istate_fw, _istate_bw, _weights, _biases, _batch_size, _seq_len):    # BiRNN requires to supply sequence_length as [batch_size, int64]    # Note: Tensorflow 0.6.0 requires BiRNN sequence_length parameter to be set    # For a better implementation with latest version of tensorflow, check below    _seq_len = tf.fill([_batch_size], constant(_seq_len, dtype=tf.float32))    # input shape: (batch_size, n_steps, n_input)    _X = tf.transpose(_X, [1, 0, 2])  # permute n_steps and batch_size    # Reshape to prepare input to hidden activation    _X = tf.reshape(_X, [-1, n_input])  # (n_steps*batch_size, n_input)    # Linear activation    # _X = tf.matmul(_X, _weights['hidden']) + _biases['hidden']    # Define lstm cells with tensorflow    # Forward direction cell    with tf.device("/cpu:0"):        lstm_fw_cell = rnn.BasicLSTMCell(n_hidden, forget_bias=0.1, state_is_tuple=True)        lstm_fw_cell = rnn.DropoutWrapper(lstm_fw_cell, input_keep_prob=1.0, output_keep_prob=1.0, seed=None)    # Backward direction cell    with tf.device("/cpu:1"):        lstm_bw_cell = rnn.BasicLSTMCell(n_hidden, forget_bias=0., state_is_tuple=True)        lstm_bw_cell = rnn.DropoutWrapper(lstm_bw_cell, input_keep_prob=1.0, output_keep_prob=1.0, seed=None)    # Split data because rnn cell needs a list of inputs for the RNN inner loop    _X = tf.split(_X, n_steps, 0)  # n_steps * (batch_size, n_hidden)    # Get lstm cell output    outputs, output1, output2 = rnn.static_bidirectional_rnn(lstm_fw_cell, lstm_bw_cell, _X,                                    initial_state_fw=lstm_fw_cell.zero_state(batch_size, tf.float32),                                    initial_state_bw=lstm_bw_cell.zero_state(batch_size, tf.float32),                                    sequence_length=_seq_len)    out1 = tf.concat([i for i in outputs], 1)    # out2 = tf.concat(1, [j for j in [i[1] for i in outputs]])    o1 = tf.matmul(out1, _weights['fc1']) + _biases['fc1']    h_fc1_drop = tf.nn.dropout(o1, keep_prob)    # dropout    # h_fc1_drop = tf.nn.dropout(o1, keep_prob)    # o2 = tf.matmul(out2, _weights['fc2']) + _biases['fc2']    # o = o1 * _weights['gather1'] + o2 * (1 - _weights['gather1'])    # # Linear activation    # o = outputs[-1][0] * _weights['gather1'] + outputs[-1][1] * (1 - _weights['gather1'])    # Get inner loop last output    return tf.matmul(o1, _weights['out']) + _biases['out'], h_fc1_dropkeep_prob = tf.placeholder(tf.float32)pred, h_fc1_drop = BiRNN(x, istate_fw, istate_bw, weights, biases, batch_size, n_steps)# Define loss and optimizercost = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(labels=y, logits=pred))  # Softmax lossoptimizer = tf.train.AdamOptimizer(learning_rate=learning_rate).minimize(cost)  # Adam Optimizer# Evaluate modelcorrect_pred = tf.equal(tf.argmax(pred, 1), tf.argmax(y, 1))accuracy = tf.reduce_mean(tf.cast(correct_pred, tf.float32))saver = tf.train.Saver()if batch_size > 1:    with tf.Session() as sess:        step = 1        while step * batch_size <= total:            batch_xs = np.array(x_train[(step - 1) * batch_size: step * batch_size])            batch_ys = np.array(y_train[(step - 1) * batch_size: step * batch_size])            # Reshape data to get 28 seq of 28 elements            batch_xs = batch_xs.reshape((batch_size, n_steps, n_input))            saver.restore(sess, "./model/model.ckpt")            print "------------------------------------------------------------"            print("Testing Accuracy:", sess.run(accuracy, feed_dict={x: batch_xs, y: batch_ys, istate_fw: np.zeros((batch_size, 2 * n_hidden)), istate_bw: np.zeros((batch_size, 2 * n_hidden)), keep_prob: 0.1}))            print(sess.run(tf.argmax(pred, 1), feed_dict={x: batch_xs,                                                        istate_fw: np.zeros((batch_size, 2 * n_hidden)),                                                        istate_bw: np.zeros((batch_size, 2 * n_hidden)), keep_prob: 1.0}))            print(sess.run(tf.argmax(batch_ys, 1)))            step += 1else:    with tf.Session() as sess:        step = 1        while step < 10:            batch_xs = np.array(x_train[(step - 1) * batch_size: step * batch_size])            batch_ys = np.array(y_train[(step - 1) * batch_size: step * batch_size])            # Reshape data to get 28 seq of 28 elements            batch_xs = batch_xs.reshape((batch_size, n_steps, n_input))            saver.restore(sess, "./model/model.ckpt")            print(sess.run(tf.sigmoid(pred), feed_dict={x: batch_xs, y: batch_ys,                                            istate_fw: np.zeros((batch_size, 2 * n_hidden)),                                            istate_bw: np.zeros((batch_size, 2 * n_hidden)),                                            keep_prob: 0.5}))            print(sess.run(tf.argmax(pred, 1), feed_dict={x: batch_xs,                                                          istate_fw: np.zeros((batch_size, 2 * n_hidden)),                                                          istate_bw: np.zeros((batch_size, 2 * n_hidden)), keep_prob: 1.0}))            print(sess.run(tf.argmax(batch_ys, 1)))            step += 1